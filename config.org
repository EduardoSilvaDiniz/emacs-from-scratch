#+title: Emacs do Zero
#+author: Eduardo Silva

* Preparação

- Instalar o Emacs
- Criar arquivo =~/.config/emacs/init.el=
- Criar o arquivo =~/.config/emacs/config.org=

** Conteúdo de =init.el=

#+begin_example
(org-babel-load-file
 (expand-file-name "config.org" user-emacs-directory))
#+end_example

* Configurações gerais
** Desabilitar tela de inicio (scratch)

#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
#+end_src

** Configuração da interface (UI)
#+begin_src emacs-lisp
  (menu-bar-mode -1)                      ; no menu bar
  (tool-bar-mode -1)                      ; no tools bar
  (scroll-bar-mode -1)                    ; no scroll bars
  (set-fringe-mode 10)                    ; frame edges set to 10px
  (column-number-mode 1)                  ; absolute numbering
  (recentf-mode 1)                        ; remember recent files
  (save-place-mode 1)                     ; remember cursor position
  (savehist-mode 1)                       ; enable history saving
  (delete-selection-mode t)               ; overwrite selected text when typing
  (global-hl-line-mode 1)                 ; enable current line highlight
  (global-visual-line-mode t)             ; visual line breaking
  (global-auto-revert-mode 1)             ; update externaly edited files
  (global-display-line-numbers-mode 1)    ; always show line numbers
#+end_src

** Numeração de linhas
#+begin_src emacs-lisp
  (global-display-line-numbers-mode 1)
  (setq display-line-numbers-type 'relative) 
  (dolist (mode '(org-mode-hook))
  ;                vterm-mode-hook
  ;                term-mode-hook
  ;                shell-mode-hook
  ;                eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src
** Usar espaços em vez de tabulações
#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
#+end_src
** Deletar texto selecionado ao digitar
#+begin_src emacs-lisp
  (delete-selection-mode t)
#+end_src
** Destaque da linha corrente
#+begin_src emacs-lisp
  (global-hl-line-mode 1)
#+end_src
** Quebra de linha visual
#+begin_src emacs-lisp
  (global-visual-line-mode t)
#+end_src
** Carregar alterações externas
#+begin_src emacs-lisp
  (global-auto-revert-mode t)
#+end_src
** Prompt de confirmação
#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p) ;
#+end_src
** Habilita o fechamento de pares
#+begin_src emacs-lisp
  (electric-pair-mode 1)
#+end_src
** Sai do minibuffer com ESC
#+begin_src emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src
** Atalhos para zoom
#+begin_src emacs-lisp
  (global-set-key (kbd "C-=") 'text-scale-increase) 
  (global-set-key (kbd "C--") 'text-scale-decrease)
#+end_src
** Configuração do package

#+begin_src emacs-lisp
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
  			 ("elpa" . "https://elpa.gnu.org/packages/")))
  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))
#+end_src

#+RESULTS:

** Configuração do use-package

#+begin_src emacs-lisp
(unless (package-installed-p 'use-package)
  (package-install 'use-package))
(require 'use-package)
(setq use-package-always-ensure t)
(setq package-enable-at-startup nil)
#+end_src

** Mudar o shell
#+begin_src emacs-lisp
(setq explicit-shell-file-name "/run/current-system/sw/bin/bash")
(setq shell-file-name "/run/current-system/sw/bin/bash")
(setq shell-command-switch "-ic")
#+end_src

* Sistema
** Backup
#+begin_src emacs-lisp
  (setq backup-directory-alist '((".*" . "~/.local/share/Trash/files")))
#+end_src
** Custom Settings
#+begin_src emacs-lisp
  (setq custom-file (locate-user-emacs-file "custom.el"))
  (load custom-file 'noerror 'nomessage)
#+end_src
** Fontes
#+begin_src emacs-lisp
  ;(set-face-attribute 'default nil :font "JetBrainsMonoNL NF Thin 13")
  ;(set-face-attribute 'variable-pitch nil :font "JetBrainsMonoNL NF Thin 13")
  ;(set-face-attribute 'fixed-pitch nil :font "JetBrainsMonoNL NF Thin 13")
#+end_src
** Funções
*** Abrir diretório de configurações pessoais
#+begin_src emacs-lisp
  (defun edu/emacs-personal-files ()
    (interactive)
    (let ((default-directory "~/.config/emacs/"))
      (call-interactively 'find-file)))
#+end_src
*** Recarga das configurações
#+begin_src emacs-lisp
  (defun edu/reload-settings ()
    (interactive)
    (load-file "~/.config/emacs/init.el"))
#+end_src
* Gerencimando de Pacotes
** Evil Mode
#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t
          evil-want-keybinding nil
          evil-vsplit-window-right t
          evil-split-window-below t
          evil-undo-system 'undo-redo)
    (evil-mode))

(use-package evil-collection
  :after evil
  :config
  (add-to-list 'evil-collection-mode-list 'help) ;; evilify help mode
  (evil-collection-init))
#+end_src

** Rainbow Mode
#+begin_src emacs-lisp
  (use-package rainbow-mode
  :diminish
  :hook org-mode prog-mode)
#+end_src

** Vertico
#+begin_src emacs-lisp
  (use-package vertico
    :bind (:map vertico-map
                ("C-j" . vertico-next)
                ("C-k" . vertico-previous)
                ("C-f" . vertico-exit)
                :map minibuffer-local-map
                ("M-h" . backward-kill-word))
    :custom
    (vertico-cycle t)
    :init
    (vertico-mode))
#+end_src

** Marginalia
#+begin_src emacs-lisp
  (use-package marginalia
    :init (marginalia-mode))
#+end_src

** Orderless
#+begin_src emacs-lisp
  (use-package orderless
    :config
    (setq completion-styles '(orderless basic)))
#+end_src

** Consult
#+begin_src emacs-lisp
  (use-package consult
    :bind (("C-s" . 'consult-line)
           ("C-x b" . 'consult-buffer)))
           ;("C-z /" . 'consult-outline) desativado pois não ah prefix C-z
           ;("C-z f g" . 'consult-grep)))
#+end_src

** Which Key
#+begin_src emacs-lisp
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0)
    (setq which-key-show-early-onC-h t))
#+end_src

** Modus Themes
#+begin_src emacs-lisp
  (use-package modus-themes)
  (setq modus-themes-mode-line '(accented borderless)
        modus-themes-region '(bg-only)
        modus-themes-paren-match '(bold intense underline)
        modus-themes-headings '((t . (rainbow bold)))
        modus-themes-org-blocks 'gray-background)
#+end_src
** Doom Themes
#+begin_src emacs-lisp
  (use-package doom-themes
    :config (setq doom-themes-enable-bold t
                  doom-themes-enable-italic t)
    (doom-themes-visual-bell-config)
    (doom-themes-org-config)
    (load-theme 'doom-palenight t))
#+end_src
** Doom modeline
#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :hook
    (after-init . doom-modeline-mode)
    :custom
    (doom-modeline-height 30)
    (set-face-attribute 'mode-line nil :font "Inconsolata" :height 100)
    (set-face-attribute 'mode-line-inactive nil :font "Inconsolata" :height 100)
    :config
    (setq doom-modeline-enable-word-count t))
#+end_src
** Diminish
#+begin_src emacs-lisp
  (use-package diminish)
  (diminish 'visual-line-mode "")
  (diminish 'eldoc-mode "")
  (diminish 'flyspell-mode "Spell")
#+end_src
** Company
#+begin_src emacs-lisp
  (use-package company
    :diminish company-mode
    :custom
    (company-begin-commands '(self-insert-command))
    (company-idle-delay .1)
    (company-minimum-prefix-length 2)
    (company-show-numbers t)
    (company-tooltip-align-annotations t)
    :hook (after-init . global-company-mode))
#+end_src
** General
#+begin_src emacs-lisp
#+end_src
** Org Mode
#+begin_src emacs-lisp
  (require 'org-tempo)
#+end_src
** Rainbow Delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters)
  (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
  (add-hook 'text-mode-hook 'rainbow-delimiters-mode)
#+end_src
** Rainbow Mode
#+begin_src emacs-lisp
  (use-package rainbow-mode
  :diminish
  :hook org-mode prog-mode)
#+end_src
** Magit
#+begin_src emacs-lisp
  (use-package magit)
#+end_src
** meow
#+begin_src emacs-lisp
        (use-package meow)
      
        (defun meow-setup ()
          (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
          (meow-motion-overwrite-define-key
           '("j" . meow-next)
           '("k" . meow-prev)
           '("<escape>" . ignore))
          (meow-leader-define-key
           ;; SPC j/k will run the original command in MOTION state.
           '("j" . "H-j")
           '("k" . "H-k")
           ;; Use SPC (0-9) for digit arguments.
           '("1" . meow-digit-argument)
           '("2" . meow-digit-argument)
           '("3" . meow-digit-argument)
           '("4" . meow-digit-argument)
           '("5" . meow-digit-argument)
           '("6" . meow-digit-argument)
           '("7" . meow-digit-argument)
           '("8" . meow-digit-argument)
           '("9" . meow-digit-argument)
           '("0" . meow-digit-argument)
           '("/" . meow-keypad-describe-key)
           '("?" . meow-cheatsheet))
          (meow-normal-define-key
           '("0" . meow-expand-0)
           '("9" . meow-expand-9)
           '("8" . meow-expand-8)
           '("7" . meow-expand-7)
           '("6" . meow-expand-6)
           '("5" . meow-expand-5)
           '("4" . meow-expand-4)
           '("3" . meow-expand-3)
           '("2" . meow-expand-2)
           '("1" . meow-expand-1)
           '("-" . negative-argument)
           '(";" . meow-reverse)
           '("," . meow-inner-of-thing)
           '("." . meow-bounds-of-thing)
           '("[" . meow-beginning-of-thing)
           '("]" . meow-end-of-thing)
           '("a" . meow-append)
           '("A" . meow-open-below)
           '("b" . meow-back-word)
           '("B" . meow-back-symbol)
           '("c" . meow-change)
           '("d" . meow-delete)
           '("D" . meow-backward-delete)
           '("e" . meow-next-word)
           '("E" . meow-next-symbol)
           '("f" . meow-find)
           '("g" . meow-cancel-selection)
           '("G" . meow-grab)
           '("h" . meow-left)
           '("H" . meow-left-expand)
           '("i" . meow-insert)
           '("I" . meow-open-above)
           '("j" . meow-next)
           '("J" . meow-next-expand)
           '("k" . meow-prev)
           '("K" . meow-prev-expand)
           '("l" . meow-right)
           '("L" . meow-right-expand)
           '("m" . meow-join)
           '("n" . meow-search)
           '("o" . meow-block)
           '("O" . meow-to-block)
           '("p" . meow-yank)
           '("q" . meow-quit)
           '("Q" . meow-goto-line)
           '("r" . meow-replace)
           '("R" . meow-swap-grab)
           '("s" . meow-kill)
           '("t" . meow-till)
           '("u" . meow-undo)
           '("U" . meow-undo-in-selection)
           '("v" . meow-visit)
           '("w" . meow-mark-word)
           '("W" . meow-mark-symbol)
           '("x" . meow-line)
           '("X" . meow-goto-line)
           '("y" . meow-save)
           '("Y" . meow-sync-grab)
           '("z" . meow-pop-selection)
           '("'" . repeat)
           '("<escape>" . ignore)))
  (require 'meow)
  (meow-setup)
    ;(meow-global-mode 1)
#+end_src
** Org Mode
*** Correção para fechamento de pares
Evitar completar ~<>~ em org-mode para não atrapalhar os snippets
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook (lambda ()
                             (setq-local electric-pair-inhibit-predicate
                                         `(lambda (c)
                                            (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))
#+end_src
*** Endentação de blocos
#+begin_src emacs-lisp
  (setq org-edit-src-content-indentation 0) ; Zera a margem dos blocos
  (electric-indent-mode -1)                 ; Desliga a indentação automática
#+end_src
*** Templates de blocos
#+begin_src emacs-lisp
  (require 'org-tempo)
#+end_src
*** Org Bullets
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
  (use-package org-bullets
  :custom
  (org-bullets-bullet-list '("▶" "▷" "◆" "◇" "▪" "▪" "▪"))) 
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src
** Vterm
#+begin_src emacs-lisp
(use-package vterm
  :config
  (setq shell-file-name "/bin/bash"
        vterm-max-scrollback 5000))
#+end_src
** Flycheck
#+begin_src emacs-lisp
(use-package flycheck
  :config (setq flycheck-idle-change-delay 0)
  :hook (prog-mode-hook . flycheck-mode))
#+end_src
** Projectile
#+begin_src emacs-lisp
(use-package projectile
  :diminish projectile-mode
  :config
  (projectile-mode))
#+end_src
** Linguagens
*** Web mode
#+begin_src emacs-lisp
(use-package web-mode
  :mode ("\\.phtml\\.tpl\\.html\\.twig\\.html?\\'" . web-mode))
#+end_src
*** Markdown mode
#+begin_src emacs-lisp
(use-package markdown-mode
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . gfm-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "pandoc"))
#+end_src
** straight
#+begin_src emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name
        "straight/repos/straight.el/bootstrap.el"
        (or (bound-and-true-p straight-base-dir)
            user-emacs-directory)))
      (bootstrap-version 7))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

#+end_src
** lspce
dependencias
#+begin_src emacs-lisp
(use-package yasnippet)
(use-package f)

#+end_src

#+begin_src emacs-lisp
(straight-use-package
 `(lspce :type git :host github :repo "zbelial/lspce"
         :files (:defaults ,(pcase system-type
                              ('gnu/linux "lspce-module.so")
                              ('darwin "lspce-module.dylib")))
         :pre-build ,(pcase system-type
                       ('gnu/linux '(("cargo" "build" "--release") ("cp" "./target/release/liblspce_module.so" "./lspce-module.so")))
                       ('darwin '(("cargo" "build" "--release") ("cp" "./target/release/liblspce_module.dylib" "./lspce-module.dylib"))))))

#+end_src
Configuração
#+begin_src emacs-lisp
(use-package lspce
  :load-path "/home/edu/.config/emacs/straight/build/lspce"
  :config (progn
            (setq lspce-send-changes-idle-time 0.1)
            (setq lspce-show-log-level-in-modeline t) ;; show log level in mode line

            ;; You should call this first if you want lspce to write logs
            (lspce-set-log-file "/tmp/lspce.log")

            ;; By default, lspce will not write log out to anywhere. 
            ;; To enable logging, you can add the following line
            ;; (lspce-enable-logging)
            ;; You can enable/disable logging on the fly by calling `lspce-enable-logging' or `lspce-disable-logging'.

            ;; enable lspce in particular buffers
            ;; (add-hook 'rust-mode-hook 'lspce-mode)

            ;; modify `lspce-server-programs' to add or change a lsp server, see document
            ;; of `lspce-lsp-type-function' to understand how to get buffer's lsp type.
            ;; Bellow is what I use
            (setq lspce-server-programs `(("rust"  "rust-analyzer" "" lspce-ra-initializationOptions)
                                          ("python" "pylsp" "" )
                                          ("C" "clangd" "--all-scopes-completion --clang-tidy --enable-config --header-insertion-decorators=0")
                                          ("java" "java" lspce-jdtls-cmd-args lspce-jdtls-initializationOptions)
                                          ))
            )
  )
#+end_src
** eglot-booter
#+begin_src emacs-lisp
(straight-use-package '(el-patch :type git :host github :repo "jdtsmith/eglot-booster"))

#+end_src
#+begin_src emacs-lisp
;(use-package eglot-booster
;  :after eglot
;  :config	(eglot-booster-mode))
#+end_src
